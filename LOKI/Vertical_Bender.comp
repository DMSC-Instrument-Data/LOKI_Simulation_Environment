/****************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2003, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: Vertical_Bender_Down
*
* %I
* Written by: Andrew Jackson
* Date: August 2016
* Version: $Revision$
* Origin: ESS
* Release: McStas 2.3
*
* Multi-channel bender curving vertically down.
*
* %D
* Based on Pol_bender written by Peter Christiansen
* Models a rectangular curved guide with entrance on Z axis.
* Entrance is on the X-Y plane. Draws a correct depiction of
* the guide with multiple channels - i.e. following components need to be
* displaced.
* Guide can contain multiple channels using horizontal blades
* Reflectivity modeled using StdReflecFunc and {R0, Qc, alpha, m, W} can be set
* for top (outside of curve), bottom (inside of curve) and sides
* (both sides equal), blades reflectivities match top and bottom (each channel is
* like a "mini guide").
*
* Example:
* Vertical_Bender(xwidth = 0.05, yheight = 0.05, length = 3.0,
*              radius = 70.0, nslit = 5, d=0.0005,
*              rTopPar={0.99, 0.219, 6.07, 3.0, 0.003},
*              rBottomPar={0.99, 0.219, 6.07, 2.0, 0.003},
*              rSidesPar={0.99, 0.219, 6.07, 2.0, 0.003},
*
* See example instrument Test_Vertical_Benders
*
* %BUGS
* Doesn't work with rotation about Z-axis and gravity
*
* GRAVITY : Yes, when component is not rotated
*
* %P
* INPUT PARAMETERS:
* xwidth:       Width at the guide entry (m)
* yheight:      Height at the guide entry (m)
* length:       length of guide along center (m)
* radius:    Radius of curvature of the guide (+:curve up/-:curve down) (m)
* nchan:        Number of channels (1)
* d:            Width of spacers (subdividing absorbing walls) (m)
* endFlat:      If endflat>0 then entrance and exit planes are parallel. (1)
* rTopPar:      Parameters for reflectivity of bender top surface
* rBottomPar:   Parameters for reflectivity of bender bottom surface
* rSidesPar:    Parameters for reflectivity of bender sides surface
*
* OUTPUT PARAMETERS:
*
* localG:       Gravity vector in guide reference system (m/s/s)
* normalXXX:    Several normal vector used for defining the geometry (1)
* pointXXX:     Several points used for defining the geometry (1)
* rXXXParPtr:   Pointers to reflection parameters used with ref. functions.
*
* %L
*
* %E
******************************************************************************/
DEFINE COMPONENT Vertical_Bender
DEFINITION PARAMETERS (
rTopPar={0.99, 0.219, 6.07, 0.0, 0.003},
rBottomPar={0.99, 0.219, 6.07, 0.0, 0.003},
rSidesPar={0.99, 0.219, 6.07, 0.0, 0.003}
)
SETTING PARAMETERS (
  xwidth, yheight, length, radius, G=9.8, int nchan=1, d=0.0,
  int debug=0, int endFlat=0, int drawOption=1

)
OUTPUT PARAMETERS(
  localG, normSides, normIn, normOut,
  pointTop, pointBot, pointIn, pointOut,
  rTopParPtr, rBotParPtr, rLeftParPtr, rRightParPtr
)
/* Neutron parameters : (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */
SHARE
%{
  %include "ref-lib"


  /*******************************************************************************
   * horiz_cylinder_intersect: compute intersection with a horizontal cylinder
   * i.e. one with length along x axis
   * returns 0 when no intersection is found
   *      or 2/4/8/16 bits depending on intersection,
   *     and resulting times t0 and t1
   * Written by: EM,NB,ABA 4.2.98
    *******************************************************************************/
  int
  horiz_cylinder_intersect(double *t0, double *t1, double x, double y, double z,
                     double vx, double vy, double vz, double r, double h)
  {
    double D, t_in, t_out, x_in, x_out;
    int ret=1;

    D = (2*vy*y + 2*vz*z)*(2*vy*y + 2*vz*z)
      - 4*(vy*vy + vz*vz)*(y*y + z*z - r*r);

    if (D>=0)
    {
      if (vz*vz + vy*vy) {
        t_in  = (-(2*vz*z + 2*vy*y) - sqrt(D))/(2*(vz*vz + vy*vy));
        t_out = (-(2*vz*z + 2*vy*y) + sqrt(D))/(2*(vz*vz + vy*vy));
      } else if (vx) { /* trajectory parallel to cylinder axis */
        t_in = (-h/2-x)/vx;
        t_out = (h/2-x)/vx;
        if (t_in>t_out){
          double tmp=t_in;
          t_in=t_out;t_out=tmp;
        }
      } else return 0;
      x_in = vx*t_in + x;
      x_out =vx*t_out + x;

      if ( (x_in > h/2 && x_out > h/2) || (x_in < -h/2 && x_out < -h/2) )
        return 0;
      else
      {
        if (x_in > h/2)
          { t_in = ((h/2)-x)/vx; ret += 2; }
        else if (x_in < -h/2)
          { t_in = ((-h/2)-x)/vx; ret += 4; }
        if (x_out > h/2)
          { t_out = ((h/2)-x)/vx; ret += 8; }
        else if (x_out < -h/2)
          { t_out = ((-h/2)-x)/vx; ret += 16; }
      }
      *t0 = t_in;
      *t1 = t_out;
      return ret;
    }
    else
    {
      *t0 = *t1 = 0;
      return 0;
    }
  } /* horiz_cylinder_intersect */

%}

DECLARE
%{
  Coords localG;
  Coords normSides, normIn, normOut;
  Coords pointLeft, pointRight, pointIn, pointOut;

  double rTopParPtr[] = (double [])rTopPar;
  double rBotParPtr[] = (double [])rBottomPar;
  double rLeftParPtr[] = (double [])rSidesPar;
  double rRightParPtr[] = (double [])rSidesPar;
%}

INITIALIZE%{
  double angle;

  if ((xwidth<=0) || (yheight <= 0) || (length <=0) || (radius == 0)){
    fprintf(stderr, "Vertical_Bender: %s: NULL or negative length scale!\n"
      "ERROR    (xwidth, yheight, length, radius). Exiting\n",
      NAME_CURRENT_COMP);
    exit(1);
  }

  if (drawOption<1 || drawOption>3) {
    fprintf(stderr, "Vertical_Bender: %s: drawOption %ld not supported. Exiting.\n",
	    NAME_CURRENT_COMP, drawOption);
    exit(1);
  }

  if (mcgravitation) {

    localG = rot_apply(ROT_A_CURRENT_COMP, coords_set(0,-GRAVITY,0));
    fprintf(stdout,"Vertical_Bender %s: Gravity is on!\n",
	    NAME_CURRENT_COMP);
    if (localG.x!=0 || localG.z!=0)
      fprintf(stderr,"WARNING: Vertical_Bender: %s: "
	      "This component only gives correct results with gravitation,\n"
	      "when gravity is strictly along the y-axis!\n",
	      NAME_CURRENT_COMP);

  } else
    localG = coords_set(0, 0, 0);

    // To be able to handle the situation properly where a component of
    // the gravity is along the z-axis we also define entrance (in) and
    // exit (out) planes


    //AJJ - do these need to be rotated so that ingoing frame is correct?
    angle = length/radius;
    normIn    = coords_set(0, 0, 1);
    if (endFlat)
      normOut   = coords_set(0, 0, 1);
    else
      normOut   = coords_set(0, sin(angle), cos(angle));
    pointIn   = coords_set(0, 0, 0);
    pointOut  = coords_set(0, radius-radius*cos(angle), radius*sin(angle));

    // Top and bot plane (+y dir) can be spanned by (1, 0, 0) & (0, 0, 1)
    // and the top point (0, yheight/2, 0) and bot point (0, -yheight/2, 0)
    // A normal vector is (0, 1, 0)
    normSides  = coords_set(1, 0, 0);
    pointLeft = coords_set(xwidth/2, 0, 0);
    pointRight = coords_set(-xwidth/2, 0, 0);


%}

TRACE
%{
  const double whalf = 0.5*xwidth; /* half width of guide */
  const double hhalf = 0.5*yheight; /* half height of guide */
  const double z_off = radius*sin(length/radius); /* z-comp of guide length */
  const double dThreshold = 1e-10; /* distance threshold */
  const double tThreshold = dThreshold/sqrt(vx*vx + vy*vy + vz*vz);
  double angle_z_vout; /* angle between z-axis and v_out */

  //Variables for multiple slits
  const double channelWidth = yheight/nchan; // slitWidth
  const double bladeHalf = 0.5*d; /* half width of spacers */
  int channelHit;    // decide which channel is hit
  double posInChannel; // position in channel

  double t11, t12, t21, t22, theta, alpha, endtime, phi;
  int i_bounce;

  double weight;

  double Rtop; /* radius of curvature of top mirror */
  double Rbottom; /* radius of curvature of bottom mirror */
  double absR = fabs(radius);
  double sign = 1;
  if (radius<0)
    sign = -1;

  /* Propagate neutron to entrance */
  PROP_Z0;
  if (!inside_rectangle(x, y, xwidth, yheight))
    ABSORB;

  if (nchan>1){
    // check if neutron gets absorbed in spacers
    posInChannel = fmod(y+hhalf, channelWidth);
    if(posInChannel <= bladeHalf ||
       posInChannel >= channelWidth-bladeHalf)
      ABSORB;

    // determine which channel neutron enters
    channelHit = (int)((y+hhalf)/channelWidth);

    // Modify radii according to the channel entered
    Rtop = absR + sign*hhalf - sign*(channelHit+1)*channelWidth + sign*bladeHalf;
    Rbottom = absR + sign*hhalf - sign*channelHit*channelWidth - sign*bladeHalf;

    if(debug > 0)
      printf("\nchannelHit: %d/%f, Rtop: %f, Rbottom: %f\n",
      channelHit, (y+hhalf)/channelWidth, Rtop, Rbottom);
   } else { // only 1 slit

     Rtop = absR - sign*hhalf;
     Rbottom = absR + sign*hhalf;

   }

  for(;;) {

    double tLeft, tRight, tTop, tBot, tIn, tOut, tMirror;
    double tUp, tSide, time, endtime;
    double R, Q;
    Coords vVec, xVec;
    double vel_yz;
    double Gx, Gy, Gz;

    xVec = coords_set(x, y, z);
    vVec = coords_set(vx, vy, vz);

    //solve for transport
    solve_2nd_order(&tLeft, NULL, 0.5*coords_sp(normSides,localG),
      coords_sp(normSides, vVec),
      coords_sp(normSides, coords_sub(xVec, pointLeft)));

    solve_2nd_order(&tRight, NULL, 0.5*coords_sp(normSides,localG),
      coords_sp(normSides, vVec),
      coords_sp(normSides, coords_sub(xVec, pointRight)));

    solve_2nd_order(&tIn, NULL, 0.5*coords_sp(normIn,localG),
		    coords_sp(normIn, vVec),
		    coords_sp(normIn, coords_sub(xVec, pointIn)));

    solve_2nd_order(&tOut, NULL, 0.5*coords_sp(normOut,localG),
		    coords_sp(normOut, vVec),
		    coords_sp(normOut, coords_sub(xVec, pointOut)));


    /* Find itersection points with top and bottom (curved) guide walls */
    if (!horiz_cylinder_intersect(&t11, &t12 ,x, y-radius, z, vx, vy, vz, Rtop,  2*xwidth)){
      /*neutron did not hit the cylinder*/
      t11=t12=0;
    }
    if (!horiz_cylinder_intersect(&t21, &t22 ,x, y-radius, z, vx, vy, vz, Rbottom, 2*xwidth)){
      /*neutron did not hit the cylinder*/
      t21=t22=0;
    }

    //Choose appropriate reflection time for curved guide walls (top/bottom)
    tTop = (t11 < tThreshold) ? t12 : t11;
    tBot = (t21 < tThreshold) ? t22 : t21;

    //Choose appropriate reflection time for sides of guide
    if (tLeft>tThreshold && (tLeft<tRight || tRight<=tThreshold))
      tSide=tLeft;
    else
      tSide=tRight;

    if (tTop>tThreshold && (tTop<tBot || tBot<=tThreshold))
      tUp=tTop;
    else
      tUp=tBot;

    if (tUp>tThreshold && (tUp<tSide || tSide<=tThreshold))
      time=tUp;
    else
      time=tSide;

    if (time<tThreshold)
      fprintf(stdout, "tTop: %f, tBot:%f, tRight: %f, tLeft: %f\n"
        "tUp: %f, tSide: %f, time: %f\n",
        tTop, tBot, tRight, tLeft, tUp, tSide, time);

    // Has the neutron left the guide?
    if (tOut>tThreshold && (tOut<tIn || tIn<=tThreshold))
      endtime=tOut;
    else
      endtime=tIn;

    if (time > endtime)
      break;

    if (mcgravitation) {
      coords_get(localG, &Gx, &Gy, &Gz);
      PROP_GRAV_DT(time,Gx,Gy,Gz);
    }
    else
      PROP_DT(time);

    SCATTER;

    /* Find reflection surface */
    if(time==tUp) { /* Top or bottom surface */
      if(time==tTop)
        R = sign*Rtop;
      else
        R = sign*Rbottom;

      phi = atan(vy/vz); /* angle of neutron trajectory */
      alpha = asin(z/R); /* angle of guide wall */
      theta = fabs(phi-alpha); /* angle of reflection */
      angle_z_vout = 2.0*alpha - phi;

      vel_yz = sqrt(vy*vy + vz*vz); /* in plane velocity */
      vz = vel_yz*cos(angle_z_vout);
      vy = vel_yz*sin(angle_z_vout);

    } else { /* left or right walls */
      theta = fabs(atan(vx/vz));
      vx = -vx;
    }

    /* Let's compute reflectivity! */
    Q = 2.0*sin(theta)*sqrt(vx*vx + vy*vy + vz*vz)*V2K;

    /* and the probability ... */
    if (time==tTop) {
      StdReflecFunc(Q, rTopParPtr, &weight);
      if (debug > 0) fprintf(stdout, "\tTop hit:\n");
    } else if (time==tBot) {
      StdReflecFunc(Q, rBotParPtr, &weight);
      if (debug > 0) fprintf(stdout, "\tBottom hit:\n");
    } else if (time==tRight) {
      StdReflecFunc(Q, rRightParPtr, &weight);
      if (debug > 0) fprintf(stdout, "\tRight hit:\n");
    } else if (time==tLeft) {
      StdReflecFunc(Q, rLeftParPtr, &weight);
      if (debug > 0) fprintf(stdout, "\tLeft hit:\n");
    }

    /* Check that weight is meaningful. If not force it.*/
    if (weight <= 0) ABSORB;
    if (weight > 1) weight = 1;

    /* Twiddle the neutron weight */
    p *= weight;

    if(p == 0) {
      // Neutron is dead. Kill it!
      ABSORB;
      break;
    }

  }

%}

MCDISPLAY
%{
  double y1, y2, z1, z2;
  const int n = 90;
  double yplot[n], zplot[n];
  int ns = 0;
  int j = 1;
  const double lengthOfGuide = sin(length/radius)*radius;
  const double channelWidth = yheight/nchan;
  double R = 0; /* radius of arc */
  int nChansMax = nchan;
  int nMax      = n;

  if (lengthOfGuide<=0)
    exit(fprintf(stdout,"Vertical_bender: %s: Negative guide length ! lengthOfGuide=%g\n",
	    NAME_CURRENT_COMP, lengthOfGuide));

  if (drawOption==2) {

    if(nChansMax>20)
      nChansMax = 20;
    nMax = 40;
  } else if (drawOption==3) {

    if(nChansMax>5)
      nChansMax = 5;
    nMax = 10;
  }

  magnify("xy");

  // draw opening
  rectangle("xy", 0, 0, 0, xwidth, yheight);

  for(ns=0; ns < nChansMax+1; ns++) {

    // to make sure the sides are drawn properly
    if(ns==nChansMax && nChansMax<nchan)
      ns=nchan;

    // calculate x for this R
    R = radius - 0.5*yheight + ns*channelWidth;

    for(j=0; j<nMax; j++) {

      if(endFlat) {

	if(ns==0)  // only calculate once
	  zplot[j] = j*lengthOfGuide/(double)(nMax-1);
      } else
	zplot[j] = R*sin(length/radius * (double)j/(double)(nMax-1));

      if(radius>0)
	yplot[j] = radius - sqrt(R*R - zplot[j]*zplot[j]);
      else
	yplot[j] = radius + sqrt(R*R - zplot[j]*zplot[j]);
    }

    // To be able to draw end we store some of the point values
    if(ns==0) { // first wall

      y1 = yplot[nMax-1];
      z1 = zplot[nMax-1];
    } else if(ns==nchan) { //last wall

      y2 = yplot[nMax-1];
      z2 = zplot[nMax-1];
    }

    for(j=0; j<nMax-1; j++) {
      line(0.5*xwidth, yplot[j], zplot[j], 0.5*xwidth, yplot[j+1], zplot[j+1]);
      line(-0.5*xwidth, yplot[j], zplot[j], -0.5*xwidth, yplot[j+1], zplot[j+1]);

    }
  }

  // draw end gap
  line(0.5*xwidth, y1, z1, 0.5*xwidth, y2, z2);
  line(0.5*xwidth, y1, z1, -0.5*xwidth, y1, z1);
  line(-0.5*xwidth, y2, z2, 0.5*xwidth, y2, z2);
  line(-0.5*xwidth, y1, z1, -0.5*xwidth, y2, z2);

%}

END
